version: 1.15.2

# Required: Set the URLs for your API and Frontend services
# Replace these placeholders with the actual domain names.
apiUrl: "" # Example: https://api.mydomain.dev
frontUrl: "" # Example: https://app.mydomain.dev


# Only for Development, Staging or PoC, you should use a managed Redis instance for Production
redis:
  enabled: true
  image:
    tag: 6.2.14
  replica:
    replicaCount: 0
  auth:
    enabled: false
  master:
    service:
      ports:
        redis: 6379
# Only for Development, Staging or PoC, you should use a managed PostgreSQL instance for Production
postgresql:
  enabled: true

global:
  # Define your Lago Premium License
  #license:
  # If you use a managed PG instance
  # Should respect this format postgresql://USER:PASSWORD@HOST:PORT/DATABASE_NAME
  #databaseUrl:
  # Should respect standard redis URL format redis://..., redis+sentinel://...
  #redisUrl:

  # If you wish to provide an existing secret with credentials in, then you can do so here.
  # The following fields are required:
  #  - databaseUrl: <SEE FORMAT ABOVE>
  #  - redisUrl:
  #  - awsS3AccessKeyId:
  #  - awsS3SecretAccessKey:
  #  - smtpUsername:
  #  - smtpPassword:
  #existingSecret: "lago-credentials"

  # Not required if using existingSecret
  postgresql:
    auth:
      username: lago
      password: lago
      database: lago
    service:
      ports:
        postgresql: 5432

  # You can disable segment tracking for Lago's internal purpose
  segment:
    enabled: true
  s3:
    enabled: false
    # accessKeyId and secretAccessKey are not required here if using existingSecret
    #accessKeyId: "<your-aws-access-key>"
    #secretAccessKey: "<your-aws-secret-key>"
    #bucket: "<your-aws-bucket>"
    #region: "<your-aws-region>"
    #endpoint: "https://s3.<region>.amazonaws.com" # Leave empty for default AWS S3 endpoint

  smtp:
    # username and password are not required here if using existingSecret
    enabled: false
    #address:
    #username:
    #password:
    #port:
    #fromEmail:
  newRelic:
    enabled: false
    #key:

  # You can disable Lago's signup
  signup:
    enabled: true

  ingress:
    enabled: false
    #frontHostname:
    #apiHostname:
    #className:

  networkPolicy:
    enabled: false
    egress: []
    ingress: []

  #serviceAccountName:

  # If kubectlVersion is not supplied it will be inferred using the version of the cluster that Lago is deployed on.
  #kubectlVersion: 1.29

front:
  replicas: 1
  service:
    port: 80
  resources:
    requests:
      memory: 512Mi
      cpu: '200m'
  podAnnotations: {}
  podLabels: {}
  extraEnv: {}


api:
  replicas: 1
  service:
    port: 3000
  rails:
    maxThreads: 10
    webConcurrency: 4
    env: 'production'
    logStdout: true
    logLevel: error
  sidekiqWeb:
    enabled: true
  resources:
    requests:
      memory: 1Gi
      cpu: '1000m'
  volumes:
    accessModes: ReadWriteOnce
    storage: '10Gi'
  extraEnv: {}
  podAnnotations: {}
  podLabels: {}

worker:
  replicas: 1
  rails:
    sidekiqConcurrency: 100
    env: 'production'
    logStdout: true
    logLevel: error
  resources:
    requests:
      memory: 1Gi
      cpu: '1000m'
  podAnnotations: {}
  podLabels: {}
  extraEnv: {}
  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3

eventsWorker:
  replicas: 1
  rails:
    sidekiqConcurrency: 100
    env: 'production'
    logStdout: true
    logLevel: error
  resources:
    requests:
      memory: 1Gi
      cpu: '1000m'
  podAnnotations: {}
  podLabels: {}
  extraEnv: {}
  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3


clock:
  replicas: 1
  rails:
    env: 'production'
    logStdout: true
    logLevel: info
  resources:
    requests:
      memory: 256Mi
      cpu: '100m'
  podAnnotations: {}
  podLabels: {}
  extraEnv: {}


pdf:
  replicas: 1
  service:
    port: 3001
  resources:
    requests:
      memory: 2Gi
      cpu: '1000m'
  podAnnotations: {}
  podLabels: {}
  extraEnv: {}


job:
  migrate:
    nameOverride: null
    podAnnotations: {}
    podLabels: {}
    resources: {}

minio:
  enabled: false
  # replicas: 2
  # fullnameOverride: "my-lago-minio"
  # endpoint: "http://minio.lago.dev"
  # nameOverride: "minio"
  # resources:
  #   requests:
  #     memory: "512Mi"
  #     cpu: "500m"
  #   limits:
  #     memory: "1Gi"
  #     cpu: "1"
  # persistence:
  #   size: 10Gi
  # ingress:
  #   enabled: true
  #   ingressClassName: nginx
  #   labels: {}
  #   annotations: {}
  #   path: /
  #   hosts:
  #     - minio.lago.dev
  #   tls: []
  # Note : only the first one will be used
  # buckets:
  #   - name: my-lago-minio
  #     policy: none
  #     purge: false
  #     versioning: false
  #     objectlocking: false
