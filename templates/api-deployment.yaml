apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.lago.service: {{ .Release.Name }}-api
  name: {{ .Release.Name }}-api
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      io.lago.service: {{ .Release.Name }}-api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.lago.service: {{ .Release.Name }}-api
        {{- range $key, $value := .Values.api.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        {{- range $key, $value := .Values.api.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      initContainers:
      {{ if .Values.postgresql.enabled }}
        - name: wait-for-postgresql
          image: "docker.io/bitnami/kubectl:{{ include "kubectlVersion" . }}"
          args:
            - wait
            - pod/{{ .Release.Name }}-postgresql-0
            - --for=condition=ready
            - --timeout=180s
      {{ end }}
      {{ if .Values.redis.enabled }}
        - name: wait-for-redis
          image: "docker.io/bitnami/kubectl:{{ include "kubectlVersion" . }}"
          args:
            - wait
            - pod/{{ .Release.Name }}-redis-master-0
            - --for=condition=ready
            - --timeout=180s
      {{ end }}
        - name: wait-for-migrations
          image: "docker.io/bitnami/kubectl:{{ include "kubectlVersion" . }}"
          args:
            - wait
            - job/{{ .Release.Name }}-migrate
            - --for=condition=complete
            - --timeout=180s
      containers:
        - args: ["bundle", "exec", "rails", "s", "-b", "::"]
          env:
            - name: RAILS_ENV
              value: {{ .Values.api.rails.env }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: databaseUrl
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: redisUrl
            - name: LAGO_REDIS_CACHE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: redisUrl
            - name: LAGO_PDF_URL
              {{- $pdfHost := printf "%s-pdf-svc.%s" .Release.Name .Release.Namespace}}
              value: {{ printf "http://%s:%v" $pdfHost .Values.pdf.service.port | quote }}
            - name: LAGO_API_URL
              value: {{ required "apiUrl value is required" .Values.apiUrl | quote }}
            - name: LAGO_FRONT_URL
              value: {{ required "frontUrl value is required" .Values.frontUrl | quote }}
            - name: LAGO_SIDEKIQ_WEB
              value: {{ .Values.api.sidekiqWeb.enabled | quote }}
            - name: RAILS_LOG_TO_STDOUT
              value: {{ .Values.api.rails.logStdout | quote }}
            - name: LAGO_RSA_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: rsaPrivateKey
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: secretKeyBase
            - name: ENCRYPTION_DETERMINISTIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionDeterministicKey
            - name: ENCRYPTION_KEY_DERIVATION_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionKeyDerivationSalt
            - name: ENCRYPTION_PRIMARY_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionPrimaryKey
            - name: LAGO_DISABLE_SEGMENT
              value: {{ not .Values.global.segment.enabled | quote }}
            - name: LAGO_DISABLE_SIGNUP
              value: {{ not .Values.global.signup.enabled | quote }}
            - name: DATABASE_POOL
              value: {{ mul .Values.api.rails.maxThreads .Values.api.rails.webConcurrency | quote }}
            - name: RAILS_MAX_THREADS
              value: {{ .Values.api.rails.maxThreads | quote }}
            - name: RAILS_MIN_THREADS
              value: "0"
            - name: SIDEKIQ_EVENTS
              value: "true"
            - name: WEB_CONCURRENCY
              value: {{ .Values.api.rails.webConcurrency | quote }}
            - name: LAGO_LOG_LEVEL
              value: {{ .Values.api.rails.logLevel | quote }}
            {{ if .Values.global.license }}
            - name: LAGO_LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: license
            {{ end }}
            {{ if .Values.global.s3.enabled }}
            - name: LAGO_USE_AWS_S3
              value: "true"
            {{ if .Values.global.s3.aws.endpoint }}
            - name: LAGO_AWS_S3_ENDPOINT
              value: {{ .Values.global.s3.aws.endpoint | quote }}
            {{ end }}
            {{ if or .Values.global.s3.aws.accessKeyId .Values.global.existingSecret }}
            - name: LAGO_AWS_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: awsS3AccessKeyId
            {{ end }}
            {{ if or .Values.global.s3.aws.secretAccessKey .Values.global.existingSecret }}
            - name: LAGO_AWS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: awsS3SecretAccessKey
            {{ end }}
            - name: LAGO_AWS_S3_BUCKET
              value: {{ .Values.global.s3.aws.bucket | quote }}
            - name: LAGO_AWS_S3_REGION
              value: {{ .Values.global.s3.aws.region | quote }}
            {{ end }}
            {{ if .Values.global.smtp.enabled }}
            - name: LAGO_FROM_EMAIL
              value: {{ .Values.global.smtp.fromEmail }}
            - name: LAGO_SMTP_ADDRESS
              value: {{ .Values.global.smtp.address }}
            - name: LAGO_SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: smtpUsername
            - name: LAGO_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: smtpPassword
            - name: LAGO_SMTP_PORT
              value: "{{ .Values.global.smtp.port }}"
            {{ end }}
            {{ if .Values.global.newRelic.enabled }}
            - name: NEW_RELIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: newRelicKey
            {{ end }}
          image: getlago/api:v{{ .Values.version }}
          name: {{ .Release.Name }}-api
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            requests:
              memory: {{ .Values.api.resources.memory }}
              cpu: {{ .Values.api.resources.cpu }}
          {{ if not .Values.global.s3.enabled }}
          volumeMounts:
            - mountPath: /app/storage
              name: {{ .Release.Name }}-storage-data
          {{ end }}
      restartPolicy: Always
      {{ if not .Values.global.s3.enabled }}
      volumes:
        - name: {{ .Release.Name }}-storage-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-storage-data
      {{ end }}
      serviceAccountName: {{ .Values.global.serviceAccountName | default (printf "%s-serviceaccount" .Release.Name) }}
