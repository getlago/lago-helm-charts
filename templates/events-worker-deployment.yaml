apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.lago.service: {{ .Release.Name }}-events-worker
  name: {{ .Release.Name }}-events-worker
spec:
  replicas: {{ .Values.eventsWorker.replicas }}
  selector:
    matchLabels:
      io.lago.service: {{ .Release.Name }}-events-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.lago.service: {{ .Release.Name }}-events-worker
        {{- range $key, $value := .Values.eventsWorker.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        {{- range $key, $value := .Values.eventsWorker.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- with .Values.eventsWorker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventsWorker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventsWorker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{ if .Values.redis.enabled }}
        - name: wait-for-redis
          image: "docker.io/bitnami/kubectl:{{ include "kubectlVersion" . }}"
          args:
            - wait
            - pod/{{ .Release.Name }}-redis-master-0
            - --for=condition=ready
            - --timeout=180s
        {{ end }}
        - name: wait-for-migrations
          image: "docker.io/bitnami/kubectl:{{ include "kubectlVersion" . }}"
          args:
            - wait
            - job/{{ include "migrateJobName" . }}
            - --for=condition=complete
            - --timeout=180s
      containers:
        - args: ["./scripts/start.events.worker.sh"]
          env:
            - name: RAILS_ENV
              value: {{ .Values.eventsWorker.rails.env }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: databaseUrl
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: redisUrl
            - name: LAGO_REDIS_CACHE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-path" . }}
                  key: redisUrl
            - name: RAILS_LOG_TO_STDOUT
              value: {{ .Values.eventsWorker.rails.logStdout | quote }}
            - name: LAGO_RSA_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: rsaPrivateKey
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: secretKeyBase
            - name: ENCRYPTION_DETERMINISTIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionDeterministicKey
            - name: ENCRYPTION_KEY_DERIVATION_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionKeyDerivationSalt
            - name: ENCRYPTION_PRIMARY_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionPrimaryKey
            - name: DATABASE_POOL
              value: {{ .Values.eventsWorker.rails.sidekiqConcurrency | quote }}
            - name: SIDEKIQ_CONCURRENCY
              value: {{ .Values.eventsWorker.rails.sidekiqConcurrency | quote }}
            - name: LAGO_LOG_LEVEL
              value: {{ .Values.eventsWorker.rails.logLevel | quote }}
            - name: SIDEKIQ_WEBHOOK
              value: {{ .Values.webhookWorker.enabled | quote }}
            - name: SIDEKIQ_BILLING
              value: {{ .Values.billingWorker.enabled | quote}}
            - name: SIDEKIQ_CLOCK
              value: {{ .Values.clockWorker.enabled | quote}}
            {{- with .Values.eventsWorker.extraEnv }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{ if .Values.global.newRelic.enabled }}
            - name: NEW_RELIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: newRelicKey
            {{ end }}
          image: getlago/api:v{{ .Values.version }}
          name: {{ .Release.Name }}-events-worker
          {{- with .Values.eventsWorker.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            exec:
              command: ["/bin/bash", "-l", "-c", "bundle exec sidekiqmon processes | grep $(hostname) || exit 1"]
            initialDelaySeconds: {{ .Values.eventsWorker.livenessProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.eventsWorker.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.eventsWorker.livenessProbe.timeoutSeconds | default 1 }}
            failureThreshold: {{ .Values.eventsWorker.livenessProbe.failureThreshold | default 3 }}
      restartPolicy: Always
      serviceAccountName: {{ .Values.global.serviceAccountName | default (printf "%s-serviceaccount" .Release.Name) }}
