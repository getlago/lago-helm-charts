apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secrets
  annotations:
    #helm.sh/resource-policy: keep
type: Opaque
data:
  {{ $secretObj := (lookup "v1" "Secret" .Release.Namespace "{{ .Release.Name }}-secrets") | default dict }}
  {{ $secretData := (get $secretObj "data" | default dict) }}

  {{ $rsaPrivateKey := (get $secretData "rsaPrivateKey") | default (genPrivateKey "rsa" | b64enc | b64enc) }}
  rsaPrivateKey: {{ $rsaPrivateKey | quote }}

  {{ $secretKeyBase := (get $secretData "secretKeyBase") | default (randAlphaNum 64 | b64enc | b64enc) }}
  secretKeyBase: {{ $secretKeyBase | quote }}

  {{ $encryptionPrimaryKey := (get $secretData "encryptionPrimaryKey") | default (randAlphaNum 32 | b64enc | b64enc) }}
  encryptionPrimaryKey: {{ $encryptionPrimaryKey | quote }}

  {{ $encryptionDeterministicKey := (get $secretData "encryptionDeterministicKey") | default (randAlphaNum 32 | b64enc | b64enc) }}
  encryptionDeterministicKey: {{ $encryptionDeterministicKey | quote }}

  {{ $encryptionKeyDerivationSalt := (get $secretData "encryptionKeyDerivationSalt") | default (randAlphaNum 32 | b64enc | b64enc) }}
  encryptionKeyDerivationSalt: {{ $encryptionKeyDerivationSalt | quote }}

  {{ if .Values.postgresql.enabled }}
  {{ $pgDatabase := .Values.global.postgresql.auth.database }}
  {{ $pgUser := .Values.global.postgresql.auth.username }}
  {{ $pgPassword := .Values.global.postgresql.auth.password }}
  {{ $pgPort := .Values.global.postgresql.service.ports.postgresql }}
  {{ $pgHost := printf "%s-postgresql.%s" .Release.Name .Release.Namespace }}
  databaseUrl: {{ printf "postgresql://%s:%s@%s:%v/%s" $pgUser $pgPassword $pgHost $pgPort $pgDatabase| b64enc | quote }}
  {{ else }}
  databaseUrl: {{ required "global.databaseUrl value is required" .Values.global.databaseUrl | b64enc | quote }}
  {{ end }}

  {{ if .Values.redis.enabled }}
  {{ $redisHost := printf "%s-redis-master.%s" .Release.Name .Release.Namespace }}
  redisUrl: {{ printf "redis://%s:%v" $redisHost .Values.redis.master.service.ports.redis | b64enc | quote }}
  {{ else }}
  redisUrl: {{ required "global.redisUrl value is required" .Values.global.redisUrl | b64enc | quote }}
  {{ end }}

  {{ if .Values.global.license }}
  license: {{ .Values.global.license | b64enc | quote }}
  {{ end }}

  {{ if .Values.global.s3.enabled }}
  awsS3AccessKeyId: {{ .Values.global.s3.aws.accessKeyid | b64enc }}
  awsS3SecretAccessKey: {{ .Values.global.s3.aws.secretAccessKey | b64enc }}
  {{ end }}

  {{ if .Values.global.smtp.enabled }}
  smtpUsername: {{ .Values.global.smtp.username | b64enc }}
  smtpPassword: {{ .Values.global.smtp.password | b64enc }}
  {{ end }}

  {{ if .Values.global.newRelic.enabled }}
  newRelicKey: {{ .Values.global.newRelic.key | b64enc }}
  {{ end }}