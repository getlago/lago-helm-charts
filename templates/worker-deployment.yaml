apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.lago.service: {{ .Release.Name }}-worker
  name: {{ .Release.Name }}-worker
spec:
  replicas: {{ .Values.worker.replicas }}
  selector:
    matchLabels:
      io.lago.service: {{ .Release.Name }}-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.lago.service: {{ .Release.Name }}-worker
    spec:
      containers:
        - args:
            - ./scripts/start.worker.sh
          env:
            - name: RAILS_ENV
              value: {{ .Values.worker.rails.env }}
            - name: LAGO_CLOUD
              value: "true"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: databaseUrl
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: redisUrl
            - name: LAGO_REDIS_CACHE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: redisUrl
            - name: LAGO_PDF_URL
              {{- $pdfHost := printf "%s-pdf-svc.%s" .Release.Name .Release.Namespace}}
              value: {{ printf "http://%s:%v" $pdfHost .Values.pdf.service.port | quote }}
            - name: LAGO_API_URL
              value: {{ required "apiUrl value is required" .Values.apiUrl | quote }}
            - name: LAGO_FRONT_URL
              value: {{ required "frontUrl value is required" .Values.frontUrl | quote }}
            - name: RAILS_LOG_TO_STDOUT
              value: {{ .Values.worker.rails.logStdout | quote }}
            - name: LAGO_RSA_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: rsaPrivateKey
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: secretKeyBase
            - name: ENCRYPTION_DETERMINISTIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionDeterministicKey
            - name: ENCRYPTION_KEY_DERIVATION_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionKeyDerivationSalt
            - name: ENCRYPTION_PRIMARY_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: encryptionPrimaryKey
            - name: LAGO_DISABLE_SEGMENT
              value: {{ not .Values.global.segment.enabled | quote }}
            - name: DATABASE_POOL
              value: {{ .Values.worker.rails.sidekiqConcurrency | quote }}
            - name: SIDEKIQ_CONCURRENCY
              value: {{ .Values.worker.rails.sidekiqConcurrency | quote }}
            {{ if .Values.global.license }}
            - name: LAGO_LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: license
            {{ end }}
            {{ if .Values.global.s3.enabled }}
            - name: LAGO_USE_AWS_S3
              value: "true"
            - name: LAGO_AWS_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: awsS3AccessKeyId
            - name: LAGO_AWS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: awsS3SecretAccessKey
            - name: LAGO_AWS_S3_BUCKET
              value: {{ .Values.global.s3.aws.bucket | quote }}
            - name: LAGO_AWS_S3_REGION
              value: {{ .Values.global.s3.aws.region | quote }}
            {{ end }}
            {{ if .Values.global.smtp.enabled }}
            - name: LAGO_FROM_EMAIL
              value: {{ .Values.global.smtp.fromEmail }}
            - name: LAGO_SMTP_ADDRESS
              value: {{ .Values.global.smtp.address }}
            - name: LAGO_SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: smtpUsername
            - name: LAGO_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: smtpPassword
            - name: LAGO_SMTP_PORT
              value: {{ .Values.smtp.port }}
            {{ end }}
            {{ if .Values.global.newRelic.enabled }}
            - name: NEW_RELIC_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: newRelicKey
            {{ end }}
          image: getlago/api:v{{ .Values.version }}
          name: {{ .Release.Name }}-worker
          resources:
            requests:
              memory: {{ .Values.worker.resources.memory }}
              cpu: {{ .Values.worker.resources.cpu }}
          {{ if not .Values.global.s3.enabled }}
          volumeMounts:
            - mountPath: /app/storage
              name: lago-storage-data
          {{ end }}
      restartPolicy: Always
      {{ if not .Values.global.s3.enabled }}
      volumes:
        - name: lago-storage-data
          persistentVolumeClaim:
            claimName: lago-storage-data
      {{ end }}
